/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VentanasProfesor;

import Beans.Alumnos;
import Beans.Asignaturas;
import Beans.Profesores;
import Utilidades.BusquedasMongo;
import Utilidades.CargarTablas;
import Utilidades.ConnectionMongoDB;
import Utilidades.DevGente;
import com.mongodb.BasicDBObject;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 3medi
 */
public class VentanaNotas extends javax.swing.JFrame {

    private Calendar fecha_actual;
    private ConnectionMongoDB conexion;
    private ArrayList<Asignaturas> asignaturas = new ArrayList<>();
    private BusquedasMongo buscar;
    private DBCursor cursor;
    private ConnectionMongoDB connectionMongoDB;
    private int codigo;
    private BasicDBObject update, setObject;
    private SimpleDateFormat format;
    private CargarTablas cargarTablas;

    /**
     * Creates new form VentanaNotas
     *
     * @param codigo
     */
    //Constructor principal
    public VentanaNotas(int codigo) {
        this.codigo = codigo;
        initComponents();
        this.setVisible(true);
        setLocationRelativeTo(null);
        fecha_actual = new GregorianCalendar();
    }

    public VentanaNotas() {
        System.out.println("Para acceder a la aplicaci√≥n tiene que iniciar desde el login.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaVisible = new javax.swing.JTable();
        actualizarTabla = new javax.swing.JButton();
        BusquedasNotas = new javax.swing.JTextField();
        BuscarAlumnos = new javax.swing.JButton();
        CancelarBusqueda = new javax.swing.JButton();
        BotonVolver = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        NombreAsignatura = new javax.swing.JTextField();
        Nota = new javax.swing.JTextField();
        IdAlumno = new javax.swing.JTextField();
        jDateChooser_Dia = new com.toedter.calendar.JDateChooser();
        Agregar = new javax.swing.JButton();
        EliminarAsignatura = new javax.swing.JButton();
        modificar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(153, 0, 255));

        jLabel1.setFont(new java.awt.Font("Baskerville Old Face", 2, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Asignaturas alumnos");

        jPanel4.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 303, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(153, 0, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Listar asignaturas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bookman Old Style", 2, 18), new java.awt.Color(255, 255, 255))); // NOI18N

        TablaVisible.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        TablaVisible.setEnabled(false);
        jScrollPane2.setViewportView(TablaVisible);

        jScrollPane1.setViewportView(jScrollPane2);

        actualizarTabla.setBackground(new java.awt.Color(0, 0, 0));
        actualizarTabla.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icons8-actualizar-35_1.png"))); // NOI18N
        actualizarTabla.setToolTipText("Cargar datos tabla");
        actualizarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarTablaActionPerformed(evt);
            }
        });

        BusquedasNotas.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        BusquedasNotas.setToolTipText("Id del alumno");

        BuscarAlumnos.setBackground(new java.awt.Color(0, 0, 0));
        BuscarAlumnos.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        BuscarAlumnos.setForeground(new java.awt.Color(255, 255, 255));
        BuscarAlumnos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icons8-acercar-20.png"))); // NOI18N
        BuscarAlumnos.setText("Buscar");
        BuscarAlumnos.setToolTipText("Buscar asignaturas del alumno");
        BuscarAlumnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarAlumnosActionPerformed(evt);
            }
        });

        CancelarBusqueda.setBackground(new java.awt.Color(0, 0, 0));
        CancelarBusqueda.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        CancelarBusqueda.setForeground(new java.awt.Color(255, 255, 255));
        CancelarBusqueda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icons8-cancelar-20.png"))); // NOI18N
        CancelarBusqueda.setText("Cancelar");
        CancelarBusqueda.setToolTipText("Cancelar busqueda");
        CancelarBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarBusquedaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(actualizarTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(BusquedasNotas, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BuscarAlumnos)
                        .addGap(18, 18, 18)
                        .addComponent(CancelarBusqueda))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BuscarAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BusquedasNotas, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(CancelarBusqueda, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(actualizarTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        BotonVolver.setBackground(new java.awt.Color(0, 0, 0));
        BotonVolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icons8-volver-50.png"))); // NOI18N
        BotonVolver.setToolTipText("Volver");
        BotonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonVolverActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(153, 0, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos asignaturas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bookman Old Style", 2, 18), new java.awt.Color(255, 255, 255))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nombre");

        jLabel3.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Nota");

        jLabel4.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Fecha");

        jLabel5.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("IdAlumno");

        NombreAsignatura.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N

        Nota.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        Nota.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NotaKeyTyped(evt);
            }
        });

        IdAlumno.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        IdAlumno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                IdAlumnoKeyTyped(evt);
            }
        });

        Agregar.setBackground(new java.awt.Color(0, 0, 0));
        Agregar.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        Agregar.setForeground(new java.awt.Color(255, 255, 255));
        Agregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icons8-crear-nuevo-50.png"))); // NOI18N
        Agregar.setText("Nueva");
        Agregar.setToolTipText("Nueva asignatura");
        Agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarActionPerformed(evt);
            }
        });

        EliminarAsignatura.setBackground(new java.awt.Color(0, 0, 0));
        EliminarAsignatura.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        EliminarAsignatura.setForeground(new java.awt.Color(255, 255, 255));
        EliminarAsignatura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icons8-papelera-vac√≠a-50.png"))); // NOI18N
        EliminarAsignatura.setText("Borrar");
        EliminarAsignatura.setToolTipText("borrar documento");
        EliminarAsignatura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarAsignaturaActionPerformed(evt);
            }
        });

        modificar.setBackground(new java.awt.Color(0, 0, 0));
        modificar.setFont(new java.awt.Font("Bookman Old Style", 2, 18)); // NOI18N
        modificar.setForeground(new java.awt.Color(255, 255, 255));
        modificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icons8-editar-archivo-50.png"))); // NOI18N
        modificar.setText("Editar");
        modificar.setToolTipText("Editar registro");
        modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(NombreAsignatura, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Nota, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Agregar))))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modificar)
                        .addGap(19, 19, 19)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(IdAlumno)
                    .addComponent(jDateChooser_Dia, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(EliminarAsignatura, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NombreAsignatura)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5)
                    .addComponent(IdAlumno))
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(Nota)
                        .addComponent(jLabel4))
                    .addComponent(jDateChooser_Dia, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EliminarAsignatura, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modificar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(72, 72, 72))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addComponent(BotonVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(122, 122, 122))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(45, 45, 45))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(BotonVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonVolverActionPerformed
        //Bot√≥n para volver a la ventana anterior 
        dispose();
    }//GEN-LAST:event_BotonVolverActionPerformed

    private void actualizarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarTablaActionPerformed

        //Cargamos los datos en las tablas 
        cargarTablas = new CargarTablas();
        cargarTablas.cargarTablaAsignaturas(this, codigo);

    }//GEN-LAST:event_actualizarTablaActionPerformed

    private void AgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarActionPerformed
        //Inicializamos los objetos 
        conexion = new ConnectionMongoDB();
        buscar = new BusquedasMongo();

        try {
            //Si la fecha es anterior a la actual muestra un mensaje
            if (fecha_actual.compareTo(jDateChooser_Dia.getCalendar()) == 1) {
                JOptionPane.showMessageDialog(rootPane, "La fecha no es apropiada, por favor ponga una mejor.");
                jDateChooser_Dia.setCalendar(null);
            }
            //Si hay alg√∫n campo sin completar 
            if (NombreAsignatura.getText().equalsIgnoreCase("") || Nota.getText().equalsIgnoreCase("") || IdAlumno.getText().equalsIgnoreCase("")) {
                JOptionPane.showMessageDialog(rootPane, "Por favor, complete todos los campos");
            }
            //Si no hay fecha introducida muestra un mensaje
            if (jDateChooser_Dia.getCalendar() == null) {
                JOptionPane.showMessageDialog(rootPane, "No ha puesto ninguna fecha.");
            } else {
                //Buscamos la collection que necesitamos 
                DBCollection nuevaCollection = conexion.getDb().getCollection("Asignaturas");
                int numDocumentos = 1001;

                //Damos valores a nuestros cursores 
                cursor = buscar.buscarAsignaturasPorCodigo(numDocumentos);
                DBCursor cursor2 = buscar.buscarProfesorId(codigo);
                DBCursor cursor3 = buscar.buscarUsuarioCodigo(Integer.parseInt(IdAlumno.getText()));

                //Sacamos los datos de los profesores y alumnos
                DevGente dev = new DevGente();
                Profesores profe = dev.devProfe(cursor2);
                Alumnos alum = dev.devAlumno(cursor3);

                //Damos formato a la fecha 
                format = new SimpleDateFormat("dd/MM/yyyy");
                String date = format.format(jDateChooser_Dia.getDate());

                System.out.println(cursor3.size());

                //Si encuentra al alumno
                if (cursor3.size() == 1) {

                    //Mientras encunetre una asignatura con la misma id suma uno hasta que no encuentre a uno con la misma id
                    while (cursor.size() == 1) {
                        numDocumentos = numDocumentos + 1;
                        cursor = buscar.buscarAsignaturasPorCodigo(numDocumentos);
                    }

                    //A√±adimos la asignatura al array 
                    asignaturas.add(new Asignaturas(numDocumentos, NombreAsignatura.getText(), Integer.parseInt(Nota.getText()), date, Integer.parseInt(IdAlumno.getText()), alum.getNombreAlumno(), codigo, profe.getNombreProfesor()));

                    //A√±adimos a la collection el array
                    for (Asignaturas asig : asignaturas) {
                        nuevaCollection.insert(asig.toDBObjectsCalificaciones());
                    }

                    JOptionPane.showMessageDialog(rootPane, "Asignatura a√±adida.");

                    //Limpiamos los campos de texto
                    clear();
                } else {
                    //Sino encunetra al alumno muestra un mensaje 
                    JOptionPane.showMessageDialog(rootPane, "Alumno no encontrado.");
                    IdAlumno.setText("");
                }

            }

            //Controlamos los distintos fallos 
        } catch (NullPointerException p) {
            JOptionPane.showMessageDialog(rootPane, "Lo siento, no ha insertado la fecha.");

        } catch (NumberFormatException q) {
            JOptionPane.showMessageDialog(rootPane, "Lo siento, no aceptamos decimales.");

        } catch (IllegalStateException e) {
            JOptionPane.showMessageDialog(rootPane, "Se ha producido un error con la base de datos. Por favor, rellene todos los campos para continuar");

        }

    }//GEN-LAST:event_AgregarActionPerformed

    private void EliminarAsignaturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarAsignaturaActionPerformed

        //Pedimos que inserte una id a buscar
        String idNota = JOptionPane.showInputDialog(null, "Inserte la id de la asignatura a borrar");

        //Inicializamos la busqueda 
        buscar = new BusquedasMongo();

        if (idNota != null) {
            //Preguntamos si esta seguro de eliminar la asignatura con esa id 
            int advertencia = JOptionPane.showConfirmDialog(null, "¬øEst√° seguro de eliminar la asignatura con la id " + idNota + "?");

            //Si est√° seguro 
            if (advertencia == JOptionPane.YES_OPTION) {
                //Si no ha insertado al id 
                if (idNota.equals("")) {
                    JOptionPane.showMessageDialog(rootPane, "No ha insertado la id, por favor vuelva a intentarlo.");
                } else {

                    //Guardamos las busquedas en el cursor 
                    cursor = buscar.buscarPorCodigo(Integer.parseInt(idNota), "Asignaturas");
                    if (cursor.size() == 1) {
                        //Si encuentra alguna asignatura con esa id la borra
                        connectionMongoDB = new ConnectionMongoDB();
                        DBObject finddoc = new BasicDBObject("_id", Integer.parseInt(idNota));

                        connectionMongoDB.getColleccion().remove(finddoc);
                        DBCollection nuevaCollection = connectionMongoDB.getDb().getCollection("Asignaturas");
                        nuevaCollection.remove(finddoc);
                        JOptionPane.showMessageDialog(rootPane, "Asignatura eliminada.");

                        
                        connectionMongoDB.getMongo().close();
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "No se encontro ninguna asignatura con esa id.");
                    }
                    cursor.close();
                    dispose();
                }

            }
        }
    }//GEN-LAST:event_EliminarAsignaturaActionPerformed

    //Metodo para limpiar los campos 
    public void clear() {
        NombreAsignatura.setText("");
        IdAlumno.setText("");
        Nota.setText("");
        jDateChooser_Dia.setCalendar(null);
    }

    private void NotaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NotaKeyTyped
        //Controla que no pueda meter letras en las notas 
        char validar = evt.getKeyChar();

        if (Character.isLetter(validar)) {
            getToolkit().beep();
            evt.consume();

            JOptionPane.showMessageDialog(rootPane, "Solo pueden insertarse numeros");
        }
    }//GEN-LAST:event_NotaKeyTyped

    private void IdAlumnoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IdAlumnoKeyTyped
        //Controla que no pueda meter letras en la id
        char validar = evt.getKeyChar();

        if (Character.isLetter(validar)) {
            getToolkit().beep();
            evt.consume();

            JOptionPane.showMessageDialog(rootPane, "Solo pueden insertarse numeros");
        }
    }//GEN-LAST:event_IdAlumnoKeyTyped

    private void BuscarAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarAlumnosActionPerformed

        //Inicializamos las busquedas 
        buscar = new BusquedasMongo();

        //Si no ha insertado ninguna asignatura muestra un mensaje 
        if (BusquedasNotas.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No ha insertado la id a buscar");
        } else {

            //Guardamos las busquedas en el cursor 
            cursor = buscar.buscarAsignaturasPorCodigoAlumno(Integer.parseInt(BusquedasNotas.getText()), codigo);
            System.out.println(cursor.size());

            try {
                //Si se encuentra alguna asignatura 
                if (cursor.size() != 0) {
                    try {
                        //Cargamos los datos 
                        cargarTablas = new CargarTablas();

                        cargarTablas.cargarTablaAlumnoAsignaturas(cursor, this);
                        actualizarTabla.setEnabled(false);

                    } catch (NullPointerException e) {

                    }
                }

                //No ha encontrado ning√∫n alumno con esa id
                if (cursor.size() == 0) {
                    JOptionPane.showMessageDialog(this, "No se han encontrado notas del alumno con la id " + BusquedasNotas.getText());
                    BusquedasNotas.setText("");

                }
                //Cerramos el cursor 

            } finally {
                cursor.close();

            }

        }
    }//GEN-LAST:event_BuscarAlumnosActionPerformed

    private void CancelarBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarBusquedaActionPerformed
        //Limpiamos todo 
        BusquedasNotas.setText("");
        actualizarTabla.setEnabled(true);
        TablaVisible.clearSelection();
        limpiarTabla();
    }//GEN-LAST:event_CancelarBusquedaActionPerformed

    private void modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarActionPerformed
        try {
            //Inicializamos la conexion y buscamos la collection
            connectionMongoDB = new ConnectionMongoDB();
            DBCollection nuevaCollection = connectionMongoDB.getDb().getCollection("Asignaturas");

            //Si la fecha es anterior a la actual 
            if (fecha_actual.compareTo(jDateChooser_Dia.getCalendar()) == 1) {
                JOptionPane.showMessageDialog(rootPane, "La fecha que ha insertado no es apropiada, por favor ponga una m√°s acorde.");
                jDateChooser_Dia.setCalendar(null);
            }
            //Si hay alg√∫n campo sin completar 
            if (NombreAsignatura.getText().equalsIgnoreCase("") || Nota.getText().equalsIgnoreCase("") || IdAlumno.getText().equalsIgnoreCase("")) {
                JOptionPane.showMessageDialog(rootPane, "Por favor, complete todos los campos");
                
            }
            //Si la fecha esta vacia 
            if (jDateChooser_Dia.getCalendar() == null) {
                JOptionPane.showMessageDialog(rootPane, "No ha puesto ninguna fecha.");
            } if(!NombreAsignatura.getText().equalsIgnoreCase("") && !Nota.getText().equalsIgnoreCase("") && !IdAlumno.getText().equalsIgnoreCase("")) {

                //Pedimos al usuario que inserte la id que desee
                String idNota = JOptionPane.showInputDialog(null, "Inserte la id de la asignatura a cambiar");
                buscar = new BusquedasMongo();

                cursor = buscar.buscarAsignaturasPorCodigo(Integer.parseInt(idNota));
                DBCursor cursor2 = buscar.buscarUsuarioCodigo(Integer.parseInt(IdAlumno.getText()));

                //Si no encuentra ninguna asignatura muestra un mensaje 
                if (cursor.size() == 0) {
                    JOptionPane.showMessageDialog(null, "Asignatura no encontrada");
                } else {
                    //Si encunetra al alumno
                    if (cursor2.size() == 1) {

                        DBObject find = new BasicDBObject("_id", Integer.parseInt(idNota));

                        //Pedimos confirmaci√≥n 
                        int advertencia = JOptionPane.showConfirmDialog(null, "¬øEsta seguro de cambiar los datos de la asignatura con id " + idNota + "?");

                        //Si esta seguro 
                        if (advertencia == JOptionPane.YES_OPTION) {

                            //Sacamos los datos del alumno 
                            DevGente dev = new DevGente();
                            Alumnos alum = dev.devAlumno(cursor2);

                            //Damos formato a la fecha
                            format = new SimpleDateFormat("dd/MM/yyyy");
                            String date = format.format(jDateChooser_Dia.getDate());

                            //Declaramos el objeto para 
                            update = new BasicDBObject();

                            //Guardamos los cambios
                            update.append("nombre", NombreAsignatura.getText());
                            update.append("notas", Integer.parseInt(Nota.getText()));
                            update.append("idAlumno", Integer.parseInt(IdAlumno.getText()));
                            update.append("nombreAlumno", alum.getNombreAlumno());
                            update.append("fecha", date);

                            //Declaramos la condici√≥n m√°s los datos que vamos a modificar 
                            setObject = new BasicDBObject();
                            setObject.append("$set", update);

                            //Modificamos la collection
                            nuevaCollection.update(find, setObject);

                            JOptionPane.showMessageDialog(null, "Se han actualizado los datos.");
                            clear();
                        }
                    } else {
                        //En el caso de que no encuentre al alumno muestra un mensaje 
                        JOptionPane.showMessageDialog(null, "Alumno no encontrada");
                        IdAlumno.setText("");
                    }

                }
            }
            //Controlamos las excepciones 
        } catch (NullPointerException p) {
            JOptionPane.showMessageDialog(rootPane, "Lo siento, no ha insertado la fecha.");

        } catch (NumberFormatException q) {
            JOptionPane.showMessageDialog(rootPane, "Lo siento, no aceptamos decimales.");

        } catch (IllegalStateException e) {
            JOptionPane.showMessageDialog(rootPane, "Se ha producido un error con la base de datos. Por favor, rellene todos los campos para continuar");

        }

    }//GEN-LAST:event_modificarActionPerformed

    //Metodo para limpiar las tablas
    public void limpiarTabla() {
        try {
            DefaultTableModel modelo = (DefaultTableModel) TablaVisible.getModel();
            int filas = TablaVisible.getRowCount();
            for (int i = 0; i <= filas; i++) {
                modelo.removeRow(0);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Se limpio la tabla correctamente.");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaNotas().setVisible(true);
            }
        });
    }

    public JTable getTablaVisible() {
        return TablaVisible;
    }

    public void setTablaVisible(JTable TablaVisible) {
        this.TablaVisible = TablaVisible;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Agregar;
    private javax.swing.JButton BotonVolver;
    private javax.swing.JButton BuscarAlumnos;
    private javax.swing.JTextField BusquedasNotas;
    private javax.swing.JButton CancelarBusqueda;
    private javax.swing.JButton EliminarAsignatura;
    private javax.swing.JTextField IdAlumno;
    private javax.swing.JTextField NombreAsignatura;
    private javax.swing.JTextField Nota;
    private javax.swing.JTable TablaVisible;
    private javax.swing.JButton actualizarTabla;
    private com.toedter.calendar.JDateChooser jDateChooser_Dia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton modificar;
    // End of variables declaration//GEN-END:variables
}
